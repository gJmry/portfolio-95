[
  {
    "id": "1",
    "name": "Svelt",
    "small_description": "A simple CLI for Svelte built in Rust",
    "long_description": "This project is all about making life easier for anyone building websites with the Svelte framework. Unlike other CLIs, this one comes with a bunch of toolkits already set up during the project’s initialization—no need to spend hours configuring everything! I wanted it to be super easy to use and lightning-fast, which is why I went with Rust for the back end. Honestly, I’m really proud of how it turned out. Oh, and it’s up on npm if you want to check it out!",
    "github": "https://github.com/gJmry/svelt",
    "icon": "computer_find"
  },
  {
    "id": "2",
    "name": "Pokémon API",
    "small_description": "An API for Pokemon in Rust",
    "long_description": "This was my very first project in Rust and also my first API! I wanted it to be fast and secure, so Rust felt like the perfect choice. At first, it was a real struggle to figure things out, but once it clicked, it was actually pretty fun. The API isn’t super detailed (for example, it’s not great for handling Pokémon since it’s missing a lot of properties), but it works! My main goal was to learn and mess around with Rust, not to make something perfect.",
    "github": "https://github.com/gJmry/PokemonAPI",
    "icon": "pokemon"
  },
  {
    "id": "3",
    "name": "RayCaster",
    "small_description": "Raycasting (Doom-Like) in C",
    "long_description": "This project was a real brain workout! I followed a tutorial to figure it out, and honestly, I still don’t fully understand how it all works. But it was super cool diving into the math to create my own raycasting software. I didn’t take it much further because, well, I tend to jump between projects a lot. But hey, it was a really fun experience while it lasted!",
    "github": "https://github.com/gJmry/RayCaster",
    "icon": "doom"
  },
  {
    "id": "4",
    "name": "Blog",
    "small_description": "My own personal Blog !",
    "long_description": "At some point in my dev journey, I thought, 'Why not make a blog to share my ideas?' There’s not much on it yet, but I’m hoping to add more this year. It’s super fun to work on, and it feels like a cool little milestone in my career!",
    "github": "https://github.com/gJmry/RayCaster",
    "icon": "book"
  },
  {
    "id": "5",
    "name": "Celeste File Watcher",
    "small_description": "A fullstack Svelte app to explore Celeste save files",
    "long_description": "Celeste is a well-known indie platformer game that uses XML files for its save system. For this project, I built a fullstack application entirely with Svelte where users could upload their Celeste save file and instantly see all the information it contained—both visible and hidden. To make it work, I had to parse the XML structure and really dive into how the game handled saves, which I found fascinating. This project was a great way to combine front-end and back-end logic while exploring how game data is stored behind the scenes.",
    "github": "https://github.com/gJmry/celeste-file-watcher",
    "icon": "gamepad"
  },
  {
    "id": "6",
    "name": "Procedural World Generation",
    "small_description": "Procedural world generation in Rust with Perlin noise",
    "long_description": "This project is all about procedural world generation based on parameters like temperature and dryness. It creates a full world map with different biomes and takes into account height, width, and length. I implemented everything in Rust using Perlin noise to generate realistic terrain. On top of that, I connected it to a Svelte front end to display the map using colored divs to represent the different biomes. Originally, I wanted to make a full 3D rendering with Threlte (a 3D library for Svelte), but I didn’t have the motivation to finish that part. Still, it was a great learning experience that combined low-level generation logic with a front-end visualization.",
    "github": "https://github.com/gJmry/procedural-world-generation",
    "icon": "globe"
  }
]
